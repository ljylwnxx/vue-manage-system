{"ast":null,"code":"import axios from 'axios';\nimport config from '../config/index'; //判断当前环境\n\nconst baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro;\n\nclass HttpRequest {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  getInsideConfig() {\n    const config = {\n      baseUrl: this.baseUrl,\n      header: {}\n    };\n    return config;\n  } // 拦截器相关的函数\n\n\n  interceptors(instance) {\n    //请求拦截\n    instance.interceptors.request.use(config => {\n      //务必返回！\n      //可以修改一些不符合服务器的要求内容\n      //每次发送请求时 都希望再界面中显示一个请求图标\n      //某些网络请求（比如登录token）,必须携带一些特殊的信息\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    }); //响应拦截\n\n    instance.interceptors.response.use(response => {\n      return response; //务必返回\n    }, error => {\n      return Promise.reject(error);\n    });\n  }\n\n  request(options) {\n    //创建axios实例\n    const instance = axios.create();\n    options = { ...this.getInsideConfig(),\n      ...options\n    }; //请求和响应拦截器\n\n    this.interceptors(instance); //发送真正的网络请求\n\n    return instance(options);\n  }\n\n}\n\nexport default new HttpRequest(baseUrl);","map":{"version":3,"names":["axios","config","baseUrl","process","env","NODE_ENV","dev","pro","HttpRequest","constructor","getInsideConfig","header","interceptors","instance","request","use","error","Promise","reject","response","options","create"],"sources":["/Users/admin/Desktop/vue-manage/api/axios.js"],"sourcesContent":["import axios from 'axios'\nimport config from '../config/index'\n\n//判断当前环境\nconst baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro\n\nclass HttpRequest {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl\n    }\n    getInsideConfig() {\n        const config = {\n            baseUrl: this.baseUrl,\n            header: {}\n        }\n        return config\n    }\n    // 拦截器相关的函数\n    interceptors(instance) {\n        //请求拦截\n        instance.interceptors.request.use(config => {\n            //务必返回！\n            //可以修改一些不符合服务器的要求内容\n            //每次发送请求时 都希望再界面中显示一个请求图标\n            //某些网络请求（比如登录token）,必须携带一些特殊的信息\n            return config\n        }, error => {\n            return Promise.reject(error)\n        })\n\n        //响应拦截\n        instance.interceptors.response.use(response => {\n            return response//务必返回\n        }, error => {\n            return Promise.reject(error)\n        })\n\n    }\n\n    request(options) {\n        //创建axios实例\n        const instance = axios.create()\n        options = {\n            ...this.getInsideConfig(), ...options\n        }\n        //请求和响应拦截器\n        this.interceptors(instance)\n        //发送真正的网络请求\n        return instance(options)\n    }\n}\nexport default new HttpRequest(baseUrl)"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCJ,MAAM,CAACC,OAAP,CAAeI,GAAxD,GAA8DL,MAAM,CAACC,OAAP,CAAeK,GAA7F;;AAEA,MAAMC,WAAN,CAAkB;EACdC,WAAW,CAACP,OAAD,EAAU;IACjB,KAAKA,OAAL,GAAeA,OAAf;EACH;;EACDQ,eAAe,GAAG;IACd,MAAMT,MAAM,GAAG;MACXC,OAAO,EAAE,KAAKA,OADH;MAEXS,MAAM,EAAE;IAFG,CAAf;IAIA,OAAOV,MAAP;EACH,CAVa,CAWd;;;EACAW,YAAY,CAACC,QAAD,EAAW;IACnB;IACAA,QAAQ,CAACD,YAAT,CAAsBE,OAAtB,CAA8BC,GAA9B,CAAkCd,MAAM,IAAI;MACxC;MACA;MACA;MACA;MACA,OAAOA,MAAP;IACH,CAND,EAMGe,KAAK,IAAI;MACR,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;IACH,CARD,EAFmB,CAYnB;;IACAH,QAAQ,CAACD,YAAT,CAAsBO,QAAtB,CAA+BJ,GAA/B,CAAmCI,QAAQ,IAAI;MAC3C,OAAOA,QAAP,CAD2C,CAC5B;IAClB,CAFD,EAEGH,KAAK,IAAI;MACR,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;IACH,CAJD;EAMH;;EAEDF,OAAO,CAACM,OAAD,EAAU;IACb;IACA,MAAMP,QAAQ,GAAGb,KAAK,CAACqB,MAAN,EAAjB;IACAD,OAAO,GAAG,EACN,GAAG,KAAKV,eAAL,EADG;MACqB,GAAGU;IADxB,CAAV,CAHa,CAMb;;IACA,KAAKR,YAAL,CAAkBC,QAAlB,EAPa,CAQb;;IACA,OAAOA,QAAQ,CAACO,OAAD,CAAf;EACH;;AA3Ca;;AA6ClB,eAAe,IAAIZ,WAAJ,CAAgBN,OAAhB,CAAf"},"metadata":{},"sourceType":"module"}