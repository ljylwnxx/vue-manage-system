{"ast":null,"code":"import _objectSpread from \"/Users/admin/Desktop/web-ele-ui/vue-manage/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/admin/Desktop/web-ele-ui/vue-manage/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/admin/Desktop/web-ele-ui/vue-manage/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nimport config from '../config/index'; //判断当前环境\n\nvar baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro;\n\nvar HttpRequest = /*#__PURE__*/function () {\n  function HttpRequest(baseUrl) {\n    _classCallCheck(this, HttpRequest);\n\n    this.baseUrl = baseUrl;\n  }\n\n  _createClass(HttpRequest, [{\n    key: \"getInsideConfig\",\n    value: function getInsideConfig() {\n      var config = {\n        baseUrl: this.baseUrl,\n        header: {}\n      };\n      return config;\n    } // 拦截器相关的函数\n\n  }, {\n    key: \"interceptors\",\n    value: function interceptors(instance) {\n      //请求拦截\n      instance.interceptors.request.use(function (config) {\n        //务必返回！\n        //可以修改一些不符合服务器的要求内容\n        //每次发送请求时 都希望再界面中显示一个请求图标\n        //某些网络请求（比如登录token）,必须携带一些特殊的信息\n        return config;\n      }, function (error) {\n        return Promise.reject(error);\n      }); //响应拦截\n\n      instance.interceptors.response.use(function (response) {\n        return response; //务必返回\n      }, function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"request\",\n    value: function request(options) {\n      //创建axios实例\n      var instance = axios.create();\n      options = _objectSpread(_objectSpread({}, this.getInsideConfig()), options); //请求和响应拦截器\n\n      this.interceptors(instance); //发送真正的网络请求\n\n      return instance(options);\n    }\n  }]);\n\n  return HttpRequest;\n}();\n\nexport default new HttpRequest(baseUrl);","map":{"version":3,"sources":["/Users/admin/Desktop/web-ele-ui/vue-manage/api/axios.js"],"names":["axios","config","baseUrl","process","env","NODE_ENV","dev","pro","HttpRequest","header","instance","interceptors","request","use","error","Promise","reject","response","options","create","getInsideConfig"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCJ,MAAM,CAACC,OAAP,CAAeI,GAAxD,GAA8DL,MAAM,CAACC,OAAP,CAAeK,GAA7F;;IAEMC,W;AACF,uBAAYN,OAAZ,EAAqB;AAAA;;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACH;;;;WACD,2BAAkB;AACd,UAAMD,MAAM,GAAG;AACXC,QAAAA,OAAO,EAAE,KAAKA,OADH;AAEXO,QAAAA,MAAM,EAAE;AAFG,OAAf;AAIA,aAAOR,MAAP;AACH,K,CACD;;;;WACA,sBAAaS,QAAb,EAAuB;AACnB;AACAA,MAAAA,QAAQ,CAACC,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAAAZ,MAAM,EAAI;AACxC;AACA;AACA;AACA;AACA,eAAOA,MAAP;AACH,OAND,EAMG,UAAAa,KAAK,EAAI;AACR,eAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,OARD,EAFmB,CAYnB;;AACAJ,MAAAA,QAAQ,CAACC,YAAT,CAAsBM,QAAtB,CAA+BJ,GAA/B,CAAmC,UAAAI,QAAQ,EAAI;AAC3C,eAAOA,QAAP,CAD2C,CAC5B;AAClB,OAFD,EAEG,UAAAH,KAAK,EAAI;AACR,eAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,OAJD;AAMH;;;WAED,iBAAQI,OAAR,EAAiB;AACb;AACA,UAAMR,QAAQ,GAAGV,KAAK,CAACmB,MAAN,EAAjB;AACAD,MAAAA,OAAO,mCACA,KAAKE,eAAL,EADA,GAC2BF,OAD3B,CAAP,CAHa,CAMb;;AACA,WAAKP,YAAL,CAAkBD,QAAlB,EAPa,CAQb;;AACA,aAAOA,QAAQ,CAACQ,OAAD,CAAf;AACH;;;;;;AAEL,eAAe,IAAIV,WAAJ,CAAgBN,OAAhB,CAAf","sourcesContent":["import axios from 'axios'\nimport config from '../config/index'\n\n//判断当前环境\nconst baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro\n\nclass HttpRequest {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl\n    }\n    getInsideConfig() {\n        const config = {\n            baseUrl: this.baseUrl,\n            header: {}\n        }\n        return config\n    }\n    // 拦截器相关的函数\n    interceptors(instance) {\n        //请求拦截\n        instance.interceptors.request.use(config => {\n            //务必返回！\n            //可以修改一些不符合服务器的要求内容\n            //每次发送请求时 都希望再界面中显示一个请求图标\n            //某些网络请求（比如登录token）,必须携带一些特殊的信息\n            return config\n        }, error => {\n            return Promise.reject(error)\n        })\n\n        //响应拦截\n        instance.interceptors.response.use(response => {\n            return response//务必返回\n        }, error => {\n            return Promise.reject(error)\n        })\n\n    }\n\n    request(options) {\n        //创建axios实例\n        const instance = axios.create()\n        options = {\n            ...this.getInsideConfig(), ...options\n        }\n        //请求和响应拦截器\n        this.interceptors(instance)\n        //发送真正的网络请求\n        return instance(options)\n    }\n}\nexport default new HttpRequest(baseUrl)"]},"metadata":{},"sourceType":"module"}